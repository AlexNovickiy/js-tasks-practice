{"version":3,"file":"generate-password.js","sources":["../src/js/generate-password.js"],"sourcesContent":["import iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst inputAmount = document.getElementById('amount');\nconst slider = document.getElementById('slider');\nconst checkboxNumbers = document.querySelector('.checkbox-numbers');\nconst checkboxSymbols = document.querySelector('.checkbox-symbols');\nconst generateButton = document.querySelector('.btn-generate');\nconst passwordOutput = document.querySelector('.password-input');\nconst copyButton = document.querySelector('.btn-copy-password');\n\ninputAmount.addEventListener('input', () => {\n    slider.value = inputAmount.value;\n});\n\nslider.addEventListener('input', () => {\n    inputAmount.value = slider.value;\n    const min = slider.min;\n    const max = slider.max;\n    const value = slider.value;\n    const valuePercent = `${100 - ((max - value) / (max - min)) * 100}%`;\n    slider.style.backgroundSize = `${valuePercent} 100%`;\n    slider.style.backgroundImage = `linear-gradient(to right, #801212 ${valuePercent},rgb(238, 4, 4) ${valuePercent})`;\n});\n\ngenerateButton.addEventListener('click', () => {\n    if(checkboxNumbers.checked && checkboxSymbols.checked) {\n        passwordOutput.value = generatePassword(inputAmount.value, true, true);\n    } else if(checkboxNumbers.checked) {\n        passwordOutput.value = generatePassword(inputAmount.value, true, false);\n    } else if(checkboxSymbols.checked) {\n        passwordOutput.value = generatePassword(inputAmount.value, false, true);\n    } else {\n        passwordOutput.value = generatePassword(inputAmount.value, false, false);\n    }\n\n    copyButton.classList.remove('visually-hidden');\n});\n\n// Function to generate a random password based on the specified criteria\n// Parameters: length (number), includeNumbers (boolean), includeSymbols (boolean)\n\nfunction generatePassword(length, includeNumbers, includeSymbols) {\n    const lowercaseChars = 'abcdefghijklmnopqrstuvwxyz';\n    const uppercaseChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const numbersChars = '0123456789';\n    const symbolsChars = '!@#$%^&*()_+[]{}|;:,.<>?';\n    \n    let characters = lowercaseChars + uppercaseChars;\n    \n    if (includeNumbers) {\n        characters += numbersChars;\n    }\n    \n    if (includeSymbols) {\n        characters += symbolsChars;\n    }\n    \n    let password = '';\n    \n    for (let i = 0; i < length; i++) {\n        const randomIndex = Math.floor(Math.random() * characters.length);\n        password += characters[randomIndex];\n    }\n    return password;\n}\n\ncopyButton.addEventListener('click', async () => {\n    const password = passwordOutput.value;\n\n    if (password) {\n        try {\n            await navigator.clipboard.writeText(password);\n            iziToast.success({\n                title: 'Success',\n                message: 'Password copied to clipboard!',\n                position: 'topRight',\n                timeout: 3000,\n                transitionIn: 'fadeInDown',\n                transitionOut: 'fadeOutUp',\n            });\n            copyButton.classList.add('visually-hidden');\n        }\n        catch (err) {\n            iziToast.error({\n                title: 'Error',\n                message: 'Failed to copy password!',\n                position: 'topRight',\n                timeout: 3000,\n                transitionIn: 'fadeInDown',\n                transitionOut: 'fadeOutUp',\n            });\n        }\n    } else if (password === '') {\n        iziToast.warning({\n            title: 'Warning',\n            message: 'No password generated!',\n            position: 'topRight',\n            timeout: 3000,\n            transitionIn: 'fadeInDown',\n            transitionOut: 'fadeOutUp',\n        });\n    }\n});\n\n"],"names":["inputAmount","slider","checkboxNumbers","checkboxSymbols","generateButton","passwordOutput","copyButton","min","max","value","valuePercent","generatePassword","length","includeNumbers","includeSymbols","lowercaseChars","uppercaseChars","numbersChars","symbolsChars","characters","password","i","randomIndex","iziToast"],"mappings":"oGAGA,MAAMA,EAAc,SAAS,eAAe,QAAQ,EAC9CC,EAAS,SAAS,eAAe,QAAQ,EACzCC,EAAkB,SAAS,cAAc,mBAAmB,EAC5DC,EAAkB,SAAS,cAAc,mBAAmB,EAC5DC,EAAiB,SAAS,cAAc,eAAe,EACvDC,EAAiB,SAAS,cAAc,iBAAiB,EACzDC,EAAa,SAAS,cAAc,oBAAoB,EAE9DN,EAAY,iBAAiB,QAAS,IAAM,CACxCC,EAAO,MAAQD,EAAY,KAC/B,CAAC,EAEDC,EAAO,iBAAiB,QAAS,IAAM,CACnCD,EAAY,MAAQC,EAAO,MAC3B,MAAMM,EAAMN,EAAO,IACbO,EAAMP,EAAO,IACbQ,EAAQR,EAAO,MACfS,EAAe,GAAG,KAAQF,EAAMC,IAAUD,EAAMD,GAAQ,GAAG,IACjEN,EAAO,MAAM,eAAiB,GAAGS,CAAY,QAC7CT,EAAO,MAAM,gBAAkB,qCAAqCS,CAAY,mBAAmBA,CAAY,GACnH,CAAC,EAEDN,EAAe,iBAAiB,QAAS,IAAM,CACxCF,EAAgB,SAAWC,EAAgB,QAC1CE,EAAe,MAAQM,EAAiBX,EAAY,MAAO,GAAM,EAAI,EAC/DE,EAAgB,QACtBG,EAAe,MAAQM,EAAiBX,EAAY,MAAO,GAAM,EAAK,EAChEG,EAAgB,QACtBE,EAAe,MAAQM,EAAiBX,EAAY,MAAO,GAAO,EAAI,EAEtEK,EAAe,MAAQM,EAAiBX,EAAY,MAAO,GAAO,EAAK,EAG3EM,EAAW,UAAU,OAAO,iBAAiB,CACjD,CAAC,EAKD,SAASK,EAAiBC,EAAQC,EAAgBC,EAAgB,CAC9D,MAAMC,EAAiB,6BACjBC,EAAiB,6BACjBC,EAAe,aACfC,EAAe,2BAErB,IAAIC,EAAaJ,EAAiBC,EAE9BH,IACAM,GAAcF,GAGdH,IACAK,GAAcD,GAGlB,IAAIE,EAAW,GAEf,QAASC,EAAI,EAAGA,EAAIT,EAAQS,IAAK,CAC7B,MAAMC,EAAc,KAAK,MAAM,KAAK,SAAWH,EAAW,MAAM,EAChEC,GAAYD,EAAWG,CAAW,CACrC,CACD,OAAOF,CACX,CAEAd,EAAW,iBAAiB,QAAS,SAAY,CAC7C,MAAMc,EAAWf,EAAe,MAEhC,GAAIe,EACA,GAAI,CACA,MAAM,UAAU,UAAU,UAAUA,CAAQ,EAC5CG,EAAS,QAAQ,CACb,MAAO,UACP,QAAS,gCACT,SAAU,WACV,QAAS,IACT,aAAc,aACd,cAAe,WAC/B,CAAa,EACDjB,EAAW,UAAU,IAAI,iBAAiB,CAC7C,MACW,CACRiB,EAAS,MAAM,CACX,MAAO,QACP,QAAS,2BACT,SAAU,WACV,QAAS,IACT,aAAc,aACd,cAAe,WAC/B,CAAa,CACJ,MACMH,IAAa,IACpBG,EAAS,QAAQ,CACb,MAAO,UACP,QAAS,yBACT,SAAU,WACV,QAAS,IACT,aAAc,aACd,cAAe,WAC3B,CAAS,CAET,CAAC"}